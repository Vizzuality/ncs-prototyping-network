/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ActionTypeListResponse,
  Error,
  GetActionTypesParams,
  ActionTypeResponse,
  ActionTypeRequest,
  GetActionTypesIdParams,
  ActionTypeLocalizationResponse,
  ActionTypeLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getActionTypes = (
  params?: GetActionTypesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<ActionTypeListResponse>(
    { url: `/action-types`, method: 'get', params, signal },
    options
  );
};

export const getGetActionTypesQueryKey = (params?: GetActionTypesParams) => {
  return [`/action-types`, ...(params ? [params] : [])] as const;
};

export const getGetActionTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getActionTypes>>,
  TError = ErrorType<Error>
>(
  params?: GetActionTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getActionTypes>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetActionTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActionTypes>>> = ({ signal }) =>
    getActionTypes(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getActionTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetActionTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getActionTypes>>>;
export type GetActionTypesQueryError = ErrorType<Error>;

export const useGetActionTypes = <
  TData = Awaited<ReturnType<typeof getActionTypes>>,
  TError = ErrorType<Error>
>(
  params?: GetActionTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getActionTypes>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetActionTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postActionTypes = (
  actionTypeRequest: ActionTypeRequest,
  options?: SecondParameter<typeof API>
) => {
  return API<ActionTypeResponse>(
    {
      url: `/action-types`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: actionTypeRequest,
    },
    options
  );
};

export const getPostActionTypesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postActionTypes>>,
    TError,
    { data: ActionTypeRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postActionTypes>>,
  TError,
  { data: ActionTypeRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postActionTypes>>,
    { data: ActionTypeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postActionTypes(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostActionTypesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postActionTypes>>
>;
export type PostActionTypesMutationBody = ActionTypeRequest;
export type PostActionTypesMutationError = ErrorType<Error>;

export const usePostActionTypes = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postActionTypes>>,
    TError,
    { data: ActionTypeRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostActionTypesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getActionTypesId = (
  id: number,
  params?: GetActionTypesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<ActionTypeResponse>(
    { url: `/action-types/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetActionTypesIdQueryKey = (id: number, params?: GetActionTypesIdParams) => {
  return [`/action-types/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetActionTypesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getActionTypesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetActionTypesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getActionTypesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetActionTypesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActionTypesId>>> = ({ signal }) =>
    getActionTypesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getActionTypesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetActionTypesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getActionTypesId>>>;
export type GetActionTypesIdQueryError = ErrorType<Error>;

export const useGetActionTypesId = <
  TData = Awaited<ReturnType<typeof getActionTypesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetActionTypesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getActionTypesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetActionTypesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putActionTypesId = (
  id: number,
  actionTypeRequest: ActionTypeRequest,
  options?: SecondParameter<typeof API>
) => {
  return API<ActionTypeResponse>(
    {
      url: `/action-types/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: actionTypeRequest,
    },
    options
  );
};

export const getPutActionTypesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putActionTypesId>>,
    TError,
    { id: number; data: ActionTypeRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putActionTypesId>>,
  TError,
  { id: number; data: ActionTypeRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putActionTypesId>>,
    { id: number; data: ActionTypeRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putActionTypesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutActionTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putActionTypesId>>
>;
export type PutActionTypesIdMutationBody = ActionTypeRequest;
export type PutActionTypesIdMutationError = ErrorType<Error>;

export const usePutActionTypesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putActionTypesId>>,
    TError,
    { id: number; data: ActionTypeRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutActionTypesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteActionTypesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/action-types/${id}`, method: 'delete' }, options);
};

export const getDeleteActionTypesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteActionTypesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteActionTypesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteActionTypesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteActionTypesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteActionTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteActionTypesId>>
>;

export type DeleteActionTypesIdMutationError = ErrorType<Error>;

export const useDeleteActionTypesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteActionTypesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteActionTypesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postActionTypesIdLocalizations = (
  id: number,
  actionTypeLocalizationRequest: ActionTypeLocalizationRequest,
  options?: SecondParameter<typeof API>
) => {
  return API<ActionTypeLocalizationResponse>(
    {
      url: `/action-types/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: actionTypeLocalizationRequest,
    },
    options
  );
};

export const getPostActionTypesIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postActionTypesIdLocalizations>>,
    TError,
    { id: number; data: ActionTypeLocalizationRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postActionTypesIdLocalizations>>,
  TError,
  { id: number; data: ActionTypeLocalizationRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postActionTypesIdLocalizations>>,
    { id: number; data: ActionTypeLocalizationRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return postActionTypesIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostActionTypesIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postActionTypesIdLocalizations>>
>;
export type PostActionTypesIdLocalizationsMutationBody = ActionTypeLocalizationRequest;
export type PostActionTypesIdLocalizationsMutationError = ErrorType<Error>;

export const usePostActionTypesIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postActionTypesIdLocalizations>>,
    TError,
    { id: number; data: ActionTypeLocalizationRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostActionTypesIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
