/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ProjectPhaseListResponse,
  Error,
  GetProjectPhasesParams,
  ProjectPhaseResponse,
  ProjectPhaseRequest,
  GetProjectPhasesIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getProjectPhases = (
  params?: GetProjectPhasesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<ProjectPhaseListResponse>(
    { url: `/project-phases`, method: 'get', params, signal },
    options
  );
};

export const getGetProjectPhasesQueryKey = (params?: GetProjectPhasesParams) => {
  return [`/project-phases`, ...(params ? [params] : [])] as const;
};

export const getGetProjectPhasesQueryOptions = <
  TData = Awaited<ReturnType<typeof getProjectPhases>>,
  TError = ErrorType<Error>
>(
  params?: GetProjectPhasesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectPhases>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectPhasesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectPhases>>> = ({ signal }) =>
    getProjectPhases(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProjectPhases>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectPhasesQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectPhases>>>;
export type GetProjectPhasesQueryError = ErrorType<Error>;

export const useGetProjectPhases = <
  TData = Awaited<ReturnType<typeof getProjectPhases>>,
  TError = ErrorType<Error>
>(
  params?: GetProjectPhasesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectPhases>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProjectPhasesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postProjectPhases = (
  projectPhaseRequest: ProjectPhaseRequest,
  options?: SecondParameter<typeof API>
) => {
  return API<ProjectPhaseResponse>(
    {
      url: `/project-phases`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: projectPhaseRequest,
    },
    options
  );
};

export const getPostProjectPhasesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProjectPhases>>,
    TError,
    { data: ProjectPhaseRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProjectPhases>>,
  TError,
  { data: ProjectPhaseRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProjectPhases>>,
    { data: ProjectPhaseRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postProjectPhases(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProjectPhasesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProjectPhases>>
>;
export type PostProjectPhasesMutationBody = ProjectPhaseRequest;
export type PostProjectPhasesMutationError = ErrorType<Error>;

export const usePostProjectPhases = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProjectPhases>>,
    TError,
    { data: ProjectPhaseRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostProjectPhasesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getProjectPhasesId = (
  id: number,
  params?: GetProjectPhasesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<ProjectPhaseResponse>(
    { url: `/project-phases/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetProjectPhasesIdQueryKey = (id: number, params?: GetProjectPhasesIdParams) => {
  return [`/project-phases/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetProjectPhasesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getProjectPhasesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetProjectPhasesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectPhasesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectPhasesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectPhasesId>>> = ({ signal }) =>
    getProjectPhasesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProjectPhasesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectPhasesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectPhasesId>>
>;
export type GetProjectPhasesIdQueryError = ErrorType<Error>;

export const useGetProjectPhasesId = <
  TData = Awaited<ReturnType<typeof getProjectPhasesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetProjectPhasesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectPhasesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProjectPhasesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putProjectPhasesId = (
  id: number,
  projectPhaseRequest: ProjectPhaseRequest,
  options?: SecondParameter<typeof API>
) => {
  return API<ProjectPhaseResponse>(
    {
      url: `/project-phases/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: projectPhaseRequest,
    },
    options
  );
};

export const getPutProjectPhasesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProjectPhasesId>>,
    TError,
    { id: number; data: ProjectPhaseRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProjectPhasesId>>,
  TError,
  { id: number; data: ProjectPhaseRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProjectPhasesId>>,
    { id: number; data: ProjectPhaseRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putProjectPhasesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutProjectPhasesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProjectPhasesId>>
>;
export type PutProjectPhasesIdMutationBody = ProjectPhaseRequest;
export type PutProjectPhasesIdMutationError = ErrorType<Error>;

export const usePutProjectPhasesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProjectPhasesId>>,
    TError,
    { id: number; data: ProjectPhaseRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutProjectPhasesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteProjectPhasesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/project-phases/${id}`, method: 'delete' }, options);
};

export const getDeleteProjectPhasesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectPhasesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProjectPhasesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProjectPhasesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteProjectPhasesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProjectPhasesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProjectPhasesId>>
>;

export type DeleteProjectPhasesIdMutationError = ErrorType<Error>;

export const useDeleteProjectPhasesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectPhasesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteProjectPhasesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
