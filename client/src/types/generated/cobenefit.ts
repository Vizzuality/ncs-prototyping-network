/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CobenefitListResponse,
  Error,
  GetCobenefitsParams,
  CobenefitResponse,
  CobenefitRequest,
  GetCobenefitsIdParams,
  CobenefitLocalizationResponse,
  CobenefitLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getCobenefits = (
  params?: GetCobenefitsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<CobenefitListResponse>({ url: `/cobenefits`, method: 'get', params, signal }, options);
};

export const getGetCobenefitsQueryKey = (params?: GetCobenefitsParams) => {
  return [`/cobenefits`, ...(params ? [params] : [])] as const;
};

export const getGetCobenefitsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCobenefits>>,
  TError = ErrorType<Error>
>(
  params?: GetCobenefitsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCobenefits>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCobenefitsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCobenefits>>> = ({ signal }) =>
    getCobenefits(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCobenefits>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCobenefitsQueryResult = NonNullable<Awaited<ReturnType<typeof getCobenefits>>>;
export type GetCobenefitsQueryError = ErrorType<Error>;

export const useGetCobenefits = <
  TData = Awaited<ReturnType<typeof getCobenefits>>,
  TError = ErrorType<Error>
>(
  params?: GetCobenefitsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCobenefits>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCobenefitsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postCobenefits = (
  cobenefitRequest: CobenefitRequest,
  options?: SecondParameter<typeof API>
) => {
  return API<CobenefitResponse>(
    {
      url: `/cobenefits`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: cobenefitRequest,
    },
    options
  );
};

export const getPostCobenefitsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCobenefits>>,
    TError,
    { data: CobenefitRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCobenefits>>,
  TError,
  { data: CobenefitRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCobenefits>>,
    { data: CobenefitRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCobenefits(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCobenefitsMutationResult = NonNullable<Awaited<ReturnType<typeof postCobenefits>>>;
export type PostCobenefitsMutationBody = CobenefitRequest;
export type PostCobenefitsMutationError = ErrorType<Error>;

export const usePostCobenefits = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCobenefits>>,
    TError,
    { data: CobenefitRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostCobenefitsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCobenefitsId = (
  id: number,
  params?: GetCobenefitsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<CobenefitResponse>(
    { url: `/cobenefits/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetCobenefitsIdQueryKey = (id: number, params?: GetCobenefitsIdParams) => {
  return [`/cobenefits/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetCobenefitsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCobenefitsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetCobenefitsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCobenefitsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCobenefitsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCobenefitsId>>> = ({ signal }) =>
    getCobenefitsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCobenefitsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCobenefitsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCobenefitsId>>>;
export type GetCobenefitsIdQueryError = ErrorType<Error>;

export const useGetCobenefitsId = <
  TData = Awaited<ReturnType<typeof getCobenefitsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetCobenefitsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCobenefitsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCobenefitsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putCobenefitsId = (
  id: number,
  cobenefitRequest: CobenefitRequest,
  options?: SecondParameter<typeof API>
) => {
  return API<CobenefitResponse>(
    {
      url: `/cobenefits/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: cobenefitRequest,
    },
    options
  );
};

export const getPutCobenefitsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCobenefitsId>>,
    TError,
    { id: number; data: CobenefitRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCobenefitsId>>,
  TError,
  { id: number; data: CobenefitRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCobenefitsId>>,
    { id: number; data: CobenefitRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putCobenefitsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCobenefitsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCobenefitsId>>
>;
export type PutCobenefitsIdMutationBody = CobenefitRequest;
export type PutCobenefitsIdMutationError = ErrorType<Error>;

export const usePutCobenefitsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCobenefitsId>>,
    TError,
    { id: number; data: CobenefitRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutCobenefitsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCobenefitsId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/cobenefits/${id}`, method: 'delete' }, options);
};

export const getDeleteCobenefitsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCobenefitsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCobenefitsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCobenefitsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCobenefitsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCobenefitsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCobenefitsId>>
>;

export type DeleteCobenefitsIdMutationError = ErrorType<Error>;

export const useDeleteCobenefitsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCobenefitsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteCobenefitsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postCobenefitsIdLocalizations = (
  id: number,
  cobenefitLocalizationRequest: CobenefitLocalizationRequest,
  options?: SecondParameter<typeof API>
) => {
  return API<CobenefitLocalizationResponse>(
    {
      url: `/cobenefits/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: cobenefitLocalizationRequest,
    },
    options
  );
};

export const getPostCobenefitsIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCobenefitsIdLocalizations>>,
    TError,
    { id: number; data: CobenefitLocalizationRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCobenefitsIdLocalizations>>,
  TError,
  { id: number; data: CobenefitLocalizationRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCobenefitsIdLocalizations>>,
    { id: number; data: CobenefitLocalizationRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return postCobenefitsIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCobenefitsIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCobenefitsIdLocalizations>>
>;
export type PostCobenefitsIdLocalizationsMutationBody = CobenefitLocalizationRequest;
export type PostCobenefitsIdLocalizationsMutationError = ErrorType<Error>;

export const usePostCobenefitsIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCobenefitsIdLocalizations>>,
    TError,
    { id: number; data: CobenefitLocalizationRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostCobenefitsIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
